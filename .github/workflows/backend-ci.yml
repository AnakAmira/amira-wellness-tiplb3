name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'amira-wellness/backend'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-lint-${{ hashFiles('src/backend/requirements.txt') }}
          restore-keys: pip-lint-
          
      - name: Install dependencies
        run: pip install flake8 black isort mypy
        working-directory: src/backend
        
      - name: Run linters
        run: flake8 app && black --check app && isort --check app && mypy app
        working-directory: src/backend

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-test-${{ hashFiles('src/backend/requirements.txt') }}
          restore-keys: pip-test-
          
      - name: Install dependencies
        run: pip install -r requirements.txt && pip install pytest pytest-cov
        working-directory: src/backend
        
      - name: Run unit tests
        run: pytest tests/unit --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=90
        working-directory: src/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key
          ENVIRONMENT: test
          
      - name: Run integration tests
        run: pytest tests/integration
        working-directory: src/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test_secret_key
          ENVIRONMENT: test
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: src/backend/coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: pip install bandit safety
        working-directory: src/backend
        
      - name: Run Bandit (SAST)
        run: bandit -r app -f json -o bandit-results.json
        working-directory: src/backend
        
      - name: Run Safety (dependency check)
        run: safety check -r requirements.txt --json > safety-results.json
        working-directory: src/backend
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: src/backend/*-results.json

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        run: echo "::set-output name=tags::${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo ${{ github.sha }} | cut -c1-7),${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max