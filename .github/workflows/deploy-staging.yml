name: Deploy to Staging

on:
  workflow_dispatch:  # Allow manual triggering of the workflow
  push:
    branches:
      - staging       # Run automatically when code is pushed to the staging branch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: amira-wellness-backend
  ECS_CLUSTER: amira-wellness-staging
  ECS_SERVICE: backend-service
  TERRAFORM_WORKING_DIR: infrastructure/terraform/environments/staging

# Set default permissions to minimum required
permissions:
  contents: read     # Required to checkout repository code
  id-token: write    # Required for AWS credential provider

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: staging  # Use GitHub environments for deployment approvals
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform plan -out=tfplan

      # Manual approval is handled by GitHub Environment protection rules
      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push the Docker image to ECR
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging-${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Get the current ECS task definition
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition amira-backend-staging --query taskDefinition > task-definition.json

      # Update the task definition with the new image
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: amira-backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging-${{ github.sha }}

      # Deploy the updated task definition to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          timeout: 600  # 10 minutes timeout for stability

      # Run database migrations as a separate ECS task
      - name: Run database migrations
        run: |
          # Launch the migration task
          task_arn=$(aws ecs run-task --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition amira-migrations-staging \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_IDS }}],assignPublicIp=DISABLED}" \
            --launch-type FARGATE \
            --started-by "github-actions" \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Migration task ARN: $task_arn"
          
          # Wait for migrations to complete with timeout
          echo "Waiting for migrations to complete..."
          timeout=300  # 5 minutes
          interval=10  # Check every 10 seconds
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            # Check task status
            status=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $task_arn \
              --query 'tasks[0].lastStatus' --output text)
            
            if [ "$status" = "STOPPED" ]; then
              # Check exit code
              exit_code=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $task_arn \
                --query 'tasks[0].containers[0].exitCode' --output text)
              
              if [ "$exit_code" -eq 0 ]; then
                echo "Migrations completed successfully"
                exit 0
              else
                echo "Migrations failed with exit code $exit_code"
                exit 1
              fi
            fi
            
            echo "Current task status: $status (waited ${elapsed}s)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          echo "Timeout waiting for migrations to complete"
          exit 1

  run-smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      # Run basic API endpoint tests
      - name: Run smoke tests
        run: |
          python -m pytest tests/smoke/test_api_endpoints.py -v
        env:
          API_BASE_URL: https://api-staging.amirawellness.com

      # Verify core application functionality
      - name: Verify critical functionality
        run: |
          python -m pytest tests/smoke/test_critical_flows.py -v
        env:
          API_BASE_URL: https://api-staging.amirawellness.com
          TEST_USERNAME: ${{ secrets.TEST_USER_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  notify-deployment-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend, run-smoke-tests]
    if: always()  # Run even if previous jobs fail
    steps:
      # Determine overall deployment status
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.run-smoke-tests.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment to staging completed successfully!" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment to staging failed." >> $GITHUB_OUTPUT
          fi

      # Send notification to Slack
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ steps.status.outputs.message }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.status.outputs.message }}\n*Repository:* ${{ github.repository }}\n*Branch:* staging\n*Commit:* ${{ github.sha }}\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      # Update deployment status in monitoring system
      - name: Update monitoring system
        run: |
          curl -X POST "https://monitoring.amirawellness.com/api/deployments" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "environment": "staging",
            "status": "${{ steps.status.outputs.status }}",
            "commit": "${{ github.sha }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF