version: '3.8'

services:
  api:
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/Dockerfile.backend
      args:
        APP_ENV: development
    volumes:
      - ../../src/backend:/app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - PROJECT_NAME=Amira Wellness
      - API_V1_STR=/api/v1
      - POSTGRES_SERVER=db
      - POSTGRES_DB=amira_wellness
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - SECRET_KEY=development-secret-key-not-for-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - USE_AWS_KMS=false
      - RATE_LIMIT_PER_MINUTE=100
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    depends_on:
      - db
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - amira_network
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  worker:
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/Dockerfile.backend
      args:
        APP_ENV: development
    volumes:
      - ../../src/backend:/app
    environment:
      - ENVIRONMENT=development
      - PROJECT_NAME=Amira Wellness
      - API_V1_STR=/api/v1
      - POSTGRES_SERVER=db
      - POSTGRES_DB=amira_wellness
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - SECRET_KEY=development-secret-key-not-for-production
      - USE_AWS_KMS=false
      - LOG_LEVEL=DEBUG
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - amira_network
    command: ["celery", "-A", "app.background.worker", "worker", "--loglevel=debug"]

  scheduler:
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/Dockerfile.backend
      args:
        APP_ENV: development
    volumes:
      - ../../src/backend:/app
    environment:
      - ENVIRONMENT=development
      - PROJECT_NAME=Amira Wellness
      - API_V1_STR=/api/v1
      - POSTGRES_SERVER=db
      - POSTGRES_DB=amira_wellness
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - SECRET_KEY=development-secret-key-not-for-production
      - USE_AWS_KMS=false
      - LOG_LEVEL=DEBUG
    depends_on:
      - db
      - redis
      - worker
    restart: unless-stopped
    networks:
      - amira_network
    command: ["celery", "-A", "app.background.worker", "beat", "--loglevel=debug"]

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=amira_wellness
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - amira_network

  redis:
    image: redis:7.0-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - amira_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  amira_network:
    driver: bridge