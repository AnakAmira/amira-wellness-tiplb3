keys=root,app,app.api,app.core,app.services,app.background,uvicorn,uvicorn.access,gunicorn,gunicorn.access

[handlers]
keys=console,file,access,error_file

[formatters]
keys=json,access,simple

[filters]
keys=correlation_id,privacy

[logger_root]
level=INFO
handlers=console,file
propagate=0

[logger_app]
level=INFO
handlers=console,file
propagate=0
qualname=app

[logger_app.api]
level=INFO
handlers=console,file
propagate=0
qualname=app.api

[logger_app.core]
level=INFO
handlers=console,file
propagate=0
qualname=app.core

[logger_app.services]
level=INFO
handlers=console,file
propagate=0
qualname=app.services

[logger_app.background]
level=INFO
handlers=console,file
propagate=0
qualname=app.background

[logger_uvicorn]
level=INFO
handlers=console,file
propagate=0
qualname=uvicorn

[logger_uvicorn.access]
level=INFO
handlers=access
propagate=0
qualname=uvicorn.access

[logger_gunicorn]
level=INFO
handlers=console,file
propagate=0
qualname=gunicorn

[logger_gunicorn.access]
level=INFO
handlers=access
propagate=0
qualname=gunicorn.access

[handler_console]
class=logging.StreamHandler
level=INFO
formatter=json
filters=correlation_id,privacy
args=(sys.stdout,)

[handler_file]
class=logging.handlers.RotatingFileHandler
level=INFO
formatter=json
filters=correlation_id,privacy
args=('/var/log/amira/app.log', 'a', 10485760, 10, 'utf8')

[handler_access]
class=logging.StreamHandler
level=INFO
formatter=access
filters=correlation_id,privacy
args=(sys.stdout,)

[handler_error_file]
class=logging.handlers.RotatingFileHandler
level=ERROR
formatter=json
filters=correlation_id,privacy
args=('/var/log/amira/error.log', 'a', 10485760, 10, 'utf8')

[formatter_json]
class=app.core.logging.JsonFormatter

[formatter_access]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S

[formatter_simple]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S

[filter_correlation_id]
class=app.core.logging.CorrelationIdFilter

[filter_privacy]
class=app.core.logging.PrivacyFilter

# Environment-specific overrides are handled programmatically
# through separate configuration loading based on environment:
#
# Development Environment:
# - More verbose logging (DEBUG level)
# - Local log file paths (./logs/*)
#
# Testing Environment:  
# - Special log file names for testing
#
# Production Environment:
# - Less verbose root logging (WARNING level)
# - Standard log file locations (/var/log/amira/*)