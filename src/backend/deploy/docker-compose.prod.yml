# Amira Wellness Backend Production Deployment Configuration
#
# This Docker Compose file defines the services, networks, and volumes required for
# deploying the Amira Wellness backend application in a production environment.
# It includes configurations for Nginx reverse proxy, API service, worker service,
# scheduler service, PostgreSQL database, and Redis cache.
#
# Version: 3.8
version: "3.8"

# Define services
services:

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine # Version: 1.25
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro # Nginx configuration
      - ./ssl:/etc/nginx/ssl:ro # SSL certificates
    ports:
      - "80:80" # HTTP port
      - "443:443" # HTTPS port
    depends_on:
      - api # API service dependency
    restart: always # Restart policy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "||", "exit", "1"] # Health check command
      interval: 30s # Health check interval
      timeout: 10s # Health check timeout
      retries: 3 # Health check retries
      start_period: 30s # Health check start period
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files

  # API Service
  api:
    build:
      context: ../ # Dockerfile context
      dockerfile: Dockerfile # Dockerfile path
      args:
        APP_ENV: production # Build argument for production environment
    environment: # Environment variables
      ENVIRONMENT: production
      PROJECT_NAME: Amira Wellness
      API_V1_STR: /api/v1
      POSTGRES_SERVER: db
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      USE_AWS_KMS: "true"
      ENCRYPTION_KEY_ID: ${ENCRYPTION_KEY_ID}
      RATE_LIMIT_PER_MINUTE: "100"
      LOG_LEVEL: INFO
      GUNICORN_WORKERS: "4"
      GUNICORN_WORKER_CLASS: uvicorn.workers.UvicornWorker
      CORS_ORIGINS: ${CORS_ORIGINS}
    depends_on:
      - db # Database service dependency
      - redis # Redis service dependency
    restart: always # Restart policy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health", "||", "exit", "1"] # Health check command
      interval: 30s # Health check interval
      timeout: 10s # Health check timeout
      retries: 3 # Health check retries
      start_period: 30s # Health check start period
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files
    command: ["gunicorn", "-c", "gunicorn.conf.py", "main:app"] # Command to start the API service

  # Worker Service
  worker:
    build:
      context: ../ # Dockerfile context
      dockerfile: Dockerfile # Dockerfile path
      args:
        APP_ENV: production # Build argument for production environment
    environment: # Environment variables
      ENVIRONMENT: production
      PROJECT_NAME: Amira Wellness
      API_V1_STR: /api/v1
      POSTGRES_SERVER: db
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      USE_AWS_KMS: "true"
      ENCRYPTION_KEY_ID: ${ENCRYPTION_KEY_ID}
      LOG_LEVEL: INFO
    depends_on:
      - db # Database service dependency
      - redis # Redis service dependency
    restart: always # Restart policy
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files
    command: ["celery", "-A", "app.background.worker", "worker", "--loglevel=info"] # Command to start the worker service

  # Scheduler Service
  scheduler:
    build:
      context: ../ # Dockerfile context
      dockerfile: Dockerfile # Dockerfile path
      args:
        APP_ENV: production # Build argument for production environment
    environment: # Environment variables
      ENVIRONMENT: production
      PROJECT_NAME: Amira Wellness
      API_V1_STR: /api/v1
      POSTGRES_SERVER: db
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      USE_AWS_KMS: "true"
      ENCRYPTION_KEY_ID: ${ENCRYPTION_KEY_ID}
      LOG_LEVEL: INFO
    depends_on:
      - db # Database service dependency
      - redis # Redis service dependency
      - worker # Worker service dependency
    restart: always # Restart policy
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files
    command: ["celery", "-A", "app.background.worker", "beat", "--loglevel=info"] # Command to start the scheduler service

  # PostgreSQL Database
  db:
    image: postgres:15 # Version: 15
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume for persistent data
    environment: # Environment variables
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always # Restart policy
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"] # Health check command
      interval: 30s # Health check interval
      timeout: 10s # Health check timeout
      retries: 3 # Health check retries
      start_period: 30s # Health check start period
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files

  # Redis Cache
  redis:
    image: redis:7.0-alpine # Version: 7.0
    volumes:
      - redis_data:/data # Volume for persistent data
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"] # Command to start Redis server
    restart: always # Restart policy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"] # Health check command
      interval: 30s # Health check interval
      timeout: 10s # Health check timeout
      retries: 3 # Health check retries
      start_period: 30s # Health check start period
    networks:
      - amira_network # Network
    logging:
      driver: json-file # Logging driver
      options:
        max-size: "10m" # Maximum log file size
        max-file: "3" # Maximum number of log files

# Define volumes
volumes:
  postgres_data:
    driver: local # Local volume driver
  redis_data:
    driver: local # Local volume driver

# Define networks
networks:
  amira_network:
    driver: bridge # Bridge network driver