package com.amirawellness.data.local.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Update
import androidx.room.Delete
import androidx.room.Query
import androidx.room.OnConflictStrategy
import androidx.room.Transaction
import kotlinx.coroutines.flow.Flow
import java.util.Date
import java.util.UUID
import com.amirawellness.data.models.Streak
import com.amirawellness.data.models.StreakInfo
import com.amirawellness.data.models.DailyActivity
import com.amirawellness.data.models.ActivityType

/**
 * Data Access Object (DAO) interface for Streak entities.
 * Defines database operations for user streaks including CRUD operations,
 * queries for streak tracking, and streak updates.
 */
@Dao
interface StreakDao {
    /**
     * Inserts a streak entity into the database.
     * Uses REPLACE strategy for conflict resolution to update existing streaks.
     *
     * @param streak The streak entity to insert
     * @return The row ID of the newly inserted streak
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertStreak(streak: Streak): Long

    /**
     * Updates an existing streak entity in the database.
     *
     * @param streak The streak entity to update
     * @return The number of rows updated in the database
     */
    @Update
    suspend fun updateStreak(streak: Streak): Int

    /**
     * Deletes a streak entity from the database.
     *
     * @param streak The streak entity to delete
     * @return The number of rows deleted from the database
     */
    @Delete
    suspend fun deleteStreak(streak: Streak): Int

    /**
     * Retrieves a streak by its unique identifier.
     *
     * @param id The unique identifier of the streak
     * @return A Flow emitting the streak entity or null if not found
     */
    @Query("SELECT * FROM streaks WHERE id = :id")
    fun getStreakById(id: String): Flow<Streak?>

    /**
     * Retrieves a streak by user identifier.
     * 
     * @param userId The unique identifier of the user
     * @return A Flow emitting the streak entity or null if not found
     */
    @Query("SELECT * FROM streaks WHERE userId = :userId")
    fun getStreakByUserId(userId: String): Flow<Streak?>

    /**
     * Retrieves the current user's streak.
     * Note: This assumes a single user in the current implementation.
     *
     * @return The current user's streak or null if not found
     */
    @Query("SELECT * FROM streaks LIMIT 1")
    suspend fun getCurrentUserStreak(): Streak?

    /**
     * Retrieves all streaks from the database.
     *
     * @return A Flow emitting a list of all streak entities
     */
    @Query("SELECT * FROM streaks")
    fun getAllStreaks(): Flow<List<Streak>>

    /**
     * Retrieves comprehensive streak information for the current user.
     * Uses the Streak.fromStreak method to convert a Streak entity to a StreakInfo object.
     *
     * @return A Flow emitting streak information or null if not found
     */
    @Transaction
    fun getStreakInfo(): Flow<StreakInfo?> {
        // Implementation will be generated by Room
    }

    /**
     * Adds a daily activity to a user's streak history.
     * This is a transactional operation that modifies the streak history.
     *
     * @param streakId The ID of the streak to update
     * @param activity The daily activity to add
     * @return The number of rows affected by the update operation
     */
    @Transaction
    suspend fun addDailyActivity(streakId: String, activity: DailyActivity): Int {
        // Implementation will be generated by Room
    }

    /**
     * Updates the current streak count for a user.
     *
     * @param streakId The ID of the streak to update
     * @param currentStreak The new current streak value
     * @return The number of rows affected by the update operation
     */
    @Query("UPDATE streaks SET currentStreak = :currentStreak, updatedAt = :timestamp WHERE id = :streakId")
    suspend fun updateCurrentStreak(streakId: String, currentStreak: Int, timestamp: Date = Date()): Int

    /**
     * Updates the longest streak count for a user.
     *
     * @param streakId The ID of the streak to update
     * @param longestStreak The new longest streak value
     * @return The number of rows affected by the update operation
     */
    @Query("UPDATE streaks SET longestStreak = :longestStreak, updatedAt = :timestamp WHERE id = :streakId")
    suspend fun updateLongestStreak(streakId: String, longestStreak: Int, timestamp: Date = Date()): Int

    /**
     * Updates the last activity date for a user's streak.
     *
     * @param streakId The ID of the streak to update
     * @param lastActivityDate The new last activity date
     * @return The number of rows affected by the update operation
     */
    @Query("UPDATE streaks SET lastActivityDate = :lastActivityDate, updatedAt = :timestamp WHERE id = :streakId")
    suspend fun updateLastActivityDate(streakId: String, lastActivityDate: Date, timestamp: Date = Date()): Int

    /**
     * Updates the grace period usage for a user's streak.
     * Grace periods allow users to maintain their streak despite missing a day.
     *
     * @param streakId The ID of the streak to update
     * @param gracePeriodsUsed The number of grace periods used
     * @param lastGracePeriodUsed The date when the last grace period was used
     * @return The number of rows affected by the update operation
     */
    @Query("UPDATE streaks SET gracePeriodsUsed = :gracePeriodsUsed, lastGracePeriodUsed = :lastGracePeriodUsed, updatedAt = :timestamp WHERE id = :streakId")
    suspend fun updateGracePeriodUsage(streakId: String, gracePeriodsUsed: Int, lastGracePeriodUsed: Date, timestamp: Date = Date()): Int

    /**
     * Increments the total days active count for a user's streak.
     *
     * @param streakId The ID of the streak to update
     * @return The number of rows affected by the update operation
     */
    @Query("UPDATE streaks SET totalDaysActive = totalDaysActive + 1, updatedAt = :timestamp WHERE id = :streakId")
    suspend fun incrementTotalDaysActive(streakId: String, timestamp: Date = Date()): Int

    /**
     * Retrieves streaks ordered by longest streak (for leaderboards).
     *
     * @param limit The maximum number of results to return
     * @return A Flow emitting a list of streak entities ordered by longest streak
     */
    @Query("SELECT * FROM streaks ORDER BY longestStreak DESC LIMIT :limit")
    fun getStreaksByLongestStreak(limit: Int): Flow<List<Streak>>

    /**
     * Retrieves streaks ordered by current streak (for leaderboards).
     *
     * @param limit The maximum number of results to return
     * @return A Flow emitting a list of streak entities ordered by current streak
     */
    @Query("SELECT * FROM streaks ORDER BY currentStreak DESC LIMIT :limit")
    fun getStreaksByCurrentStreak(limit: Int): Flow<List<Streak>>

    /**
     * Retrieves streaks ordered by total days active (for leaderboards).
     *
     * @param limit The maximum number of results to return
     * @return A Flow emitting a list of streak entities ordered by total days active
     */
    @Query("SELECT * FROM streaks ORDER BY totalDaysActive DESC LIMIT :limit")
    fun getStreaksByTotalDaysActive(limit: Int): Flow<List<Streak>>

    /**
     * Retrieves streaks that are currently active (activity within the last day).
     *
     * @param cutoffDate The date to use as the cutoff for active streaks
     * @return A Flow emitting a list of active streak entities
     */
    @Query("SELECT * FROM streaks WHERE lastActivityDate >= :cutoffDate")
    fun getActiveStreaks(cutoffDate: Date): Flow<List<Streak>>

    /**
     * Deletes all streaks from the database.
     * This is primarily used for testing or resetting the application.
     *
     * @return The number of rows deleted from the database
     */
    @Query("DELETE FROM streaks")
    suspend fun deleteAllStreaks(): Int

    /**
     * Gets the total count of streaks in the database.
     *
     * @return The number of streak records in the database
     */
    @Query("SELECT COUNT(*) FROM streaks")
    suspend fun getStreakCount(): Int
}